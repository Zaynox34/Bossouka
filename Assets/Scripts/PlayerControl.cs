//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""BaseControl"",
            ""id"": ""3dca0bfd-f0da-4d9a-a080-7215dec9b59e"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""193d4948-edc9-4302-b769-234327852d10"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""North"",
                    ""type"": ""Button"",
                    ""id"": ""f5107728-7581-42f2-a18c-53949711aadc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""East"",
                    ""type"": ""Button"",
                    ""id"": ""6713e194-f5d1-4cec-a5c3-a02ebb3c6d9e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""South"",
                    ""type"": ""Button"",
                    ""id"": ""69b577a1-ef4a-4c38-84d3-3d9868dbbe9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""West"",
                    ""type"": ""Button"",
                    ""id"": ""0847277b-ee4b-4da8-ac91-bff228348818"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gatotsu"",
                    ""type"": ""Button"",
                    ""id"": ""abf7e359-9c4c-45ea-8654-1043d831b2e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""0e1637c1-b35d-48ef-919d-62611811eb11"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a2b936c5-cdfb-4c90-b8d4-0692269e9c9b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c9e7f07f-50bf-42af-9dd0-f6d53c48409e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0752c974-c685-4166-9b0d-1bc37c945c27"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""85bb0c52-6071-4ec7-b3cf-a22796833f24"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""00b07fae-5825-42b2-b4c0-c4ed28d408b4"",
                    ""path"": ""<Keyboard>/numpad8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""North"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6f1a521-d275-45b4-a311-1cc0ad30751d"",
                    ""path"": ""<Keyboard>/numpad6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""East"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d36ca0f-405b-43e2-9ff0-d34b7cc46442"",
                    ""path"": ""<Keyboard>/numpad2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""South"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b0d9b76-191e-40f1-8d7a-6ab7eedc061e"",
                    ""path"": ""<Keyboard>/numpad4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""West"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea08049c-1be9-4b6e-aa39-cac6013c8d04"",
                    ""path"": ""<Keyboard>/numpad5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gatotsu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BaseControl
        m_BaseControl = asset.FindActionMap("BaseControl", throwIfNotFound: true);
        m_BaseControl_Move = m_BaseControl.FindAction("Move", throwIfNotFound: true);
        m_BaseControl_North = m_BaseControl.FindAction("North", throwIfNotFound: true);
        m_BaseControl_East = m_BaseControl.FindAction("East", throwIfNotFound: true);
        m_BaseControl_South = m_BaseControl.FindAction("South", throwIfNotFound: true);
        m_BaseControl_West = m_BaseControl.FindAction("West", throwIfNotFound: true);
        m_BaseControl_Gatotsu = m_BaseControl.FindAction("Gatotsu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BaseControl
    private readonly InputActionMap m_BaseControl;
    private IBaseControlActions m_BaseControlActionsCallbackInterface;
    private readonly InputAction m_BaseControl_Move;
    private readonly InputAction m_BaseControl_North;
    private readonly InputAction m_BaseControl_East;
    private readonly InputAction m_BaseControl_South;
    private readonly InputAction m_BaseControl_West;
    private readonly InputAction m_BaseControl_Gatotsu;
    public struct BaseControlActions
    {
        private @PlayerControl m_Wrapper;
        public BaseControlActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_BaseControl_Move;
        public InputAction @North => m_Wrapper.m_BaseControl_North;
        public InputAction @East => m_Wrapper.m_BaseControl_East;
        public InputAction @South => m_Wrapper.m_BaseControl_South;
        public InputAction @West => m_Wrapper.m_BaseControl_West;
        public InputAction @Gatotsu => m_Wrapper.m_BaseControl_Gatotsu;
        public InputActionMap Get() { return m_Wrapper.m_BaseControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BaseControlActions set) { return set.Get(); }
        public void SetCallbacks(IBaseControlActions instance)
        {
            if (m_Wrapper.m_BaseControlActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_BaseControlActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_BaseControlActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_BaseControlActionsCallbackInterface.OnMove;
                @North.started -= m_Wrapper.m_BaseControlActionsCallbackInterface.OnNorth;
                @North.performed -= m_Wrapper.m_BaseControlActionsCallbackInterface.OnNorth;
                @North.canceled -= m_Wrapper.m_BaseControlActionsCallbackInterface.OnNorth;
                @East.started -= m_Wrapper.m_BaseControlActionsCallbackInterface.OnEast;
                @East.performed -= m_Wrapper.m_BaseControlActionsCallbackInterface.OnEast;
                @East.canceled -= m_Wrapper.m_BaseControlActionsCallbackInterface.OnEast;
                @South.started -= m_Wrapper.m_BaseControlActionsCallbackInterface.OnSouth;
                @South.performed -= m_Wrapper.m_BaseControlActionsCallbackInterface.OnSouth;
                @South.canceled -= m_Wrapper.m_BaseControlActionsCallbackInterface.OnSouth;
                @West.started -= m_Wrapper.m_BaseControlActionsCallbackInterface.OnWest;
                @West.performed -= m_Wrapper.m_BaseControlActionsCallbackInterface.OnWest;
                @West.canceled -= m_Wrapper.m_BaseControlActionsCallbackInterface.OnWest;
                @Gatotsu.started -= m_Wrapper.m_BaseControlActionsCallbackInterface.OnGatotsu;
                @Gatotsu.performed -= m_Wrapper.m_BaseControlActionsCallbackInterface.OnGatotsu;
                @Gatotsu.canceled -= m_Wrapper.m_BaseControlActionsCallbackInterface.OnGatotsu;
            }
            m_Wrapper.m_BaseControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @North.started += instance.OnNorth;
                @North.performed += instance.OnNorth;
                @North.canceled += instance.OnNorth;
                @East.started += instance.OnEast;
                @East.performed += instance.OnEast;
                @East.canceled += instance.OnEast;
                @South.started += instance.OnSouth;
                @South.performed += instance.OnSouth;
                @South.canceled += instance.OnSouth;
                @West.started += instance.OnWest;
                @West.performed += instance.OnWest;
                @West.canceled += instance.OnWest;
                @Gatotsu.started += instance.OnGatotsu;
                @Gatotsu.performed += instance.OnGatotsu;
                @Gatotsu.canceled += instance.OnGatotsu;
            }
        }
    }
    public BaseControlActions @BaseControl => new BaseControlActions(this);
    public interface IBaseControlActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnNorth(InputAction.CallbackContext context);
        void OnEast(InputAction.CallbackContext context);
        void OnSouth(InputAction.CallbackContext context);
        void OnWest(InputAction.CallbackContext context);
        void OnGatotsu(InputAction.CallbackContext context);
    }
}
